{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","id","description","value","isSettled","date","state","setState","latest","setLatest","list","setList","className","style","padding","onSubmit","e","preventDefault","obj","Date","toLocaleDateString","htmlFor","type","onChange","target","placeholder","required","checked","onClick","index","findIndex","item","console","log","newList","splice","scope","length","map","key","newDate","handleEdit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0396ee7e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [state, setState] = useState({\n    id: 0,\n    description: '',\n    value: '',\n    isSettled: false,\n    date: ''\n  })\n  const [latest, setLatest] = useState(0)\n  let [list, setList] = useState([])\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    let id = latest + 1\n\n    let obj = {\n      id: id,\n      description: state.description,\n      value: state.value,\n      isSettled: state.isSettled,\n      date: new Date().toLocaleDateString()\n    }\n    setState({ ...state, id: id })\n    setList([...list, obj])\n    setLatest(id)\n  }\n\n  const handleUpdate = (e) => {\n    e.preventDefault()\n    let index = list.findIndex(item => {\n      return item.id === state.id\n    })\n\n    if (index !== -1) {\n      let obj = {\n        id: state.id,\n        description: state.description,\n        value: state.value,\n        isSettled: state.isSettled,\n        date: new Date().toLocaleDateString()\n      }\n      console.log(index)\n\n      let newList = [...list]\n      newList.splice(index, 1, obj)\n      setList([...newList])\n    }\n  }\n\n  const handleEdit = (id, description, value, isSettled) => {\n    let index = list.findIndex(item => {\n      return item.id === id\n    })\n    let newDate = new Date().toLocaleDateString()\n    setState({ id: index + 1, description, value, isSettled, newDate })\n  }\n\n  return (\n    <div className=\"ExpenseManagerApp container\">\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <h3 style={{ padding: \"1rem 0\" }}>Expense Manager</h3>\n          <form className=\"needs-validation\" onSubmit={handleSubmit}>\n            <label htmlFor=\"formGroupExampleInput\" id=\"formGroupExampleInput\">Description</label>\n            <input type=\"text\"\n              value={state.description}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  description: e.target.value\n                })\n              }}\n              id=\"validationCustom01\"\n              className=\"form-control form-control-sm\"\n              placeholder=\"Expense Description\"\n              required />\n\n            <label htmlFor=\"formGroupExampleInput2\" id=\"formGroupExampleInput2\">Value</label>\n            <input type=\"text\"\n              value={state.value}\n              onChange={(e) => {\n                setState({\n                  ...state,\n                  value: e.target.value\n                })\n              }}\n              className=\"form-control form-control-sm\"\n              id=\"formGroupInput2\"\n              placeholder=\"Value in dolla dolla money\"\n              required />\n\n            <div className=\"form-check\">\n              <input className=\"form-check-input\"\n                checked={state.isSettled}\n                onChange={() => {\n                  setState({\n                    ...state,\n                    isSettled: !state.isSettled\n                  })\n                }}\n                type=\"checkbox\"\n                id=\"gridCheck\" />\n              <label className=\"form-check-label\" htmlFor=\"gridCheck\"> Settled? </label>\n            </div>\n            <span className=\"form-text text-muted\"> Settle your bills on time. Maintain a good credit score! </span>\n            <button className=\"btn btn-primary\"\n              type=\"submit\"> Record Transaction </button>\n            <button className=\"btn btn-primary\"\n              onClick={handleUpdate} type=\"submit\"> Update Transaction </button>\n          </form>\n        </div>\n        {/* Filter */}\n        <div className=\"col-6\">\n          <h3 style={{ padding: \"1rem 0\" }}> Expense List </h3>\n          <table className=\"table\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Description</th>\n                <th scope=\"col\">Value</th>\n                <th scope=\"col\">Status</th>\n                <th scope=\"col\">Date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {list && list.length > 0 && list.map((item, key) => {\n                return <tr key={key + 1} onClick={() => handleEdit(item.id, item.description, item.value, item.isSettled)}>\n                  <th scope=\"row\">{key + 1}</th>\n                  <td className=\"row-item\">{item.description}</td>\n                  <td className=\"row-item\">{item.value}</td>\n                  <td className={item.isSettled ? 'paid' : 'not-paid'}>{item.isSettled ? 'Paid' : 'Not Paid'}</td>\n                  <td className=\"row-item\">{item.date}</td>\n                </tr>\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}